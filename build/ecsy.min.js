!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):(e=e||self,function(){var n=e.ECSY,s=e.ECSY={};t(s),s.noConflict=function(){return e.ECSY=n,s}}())}(this,(function(exports){"use strict";function getName(e){return e.name}function componentPropertyName(e){return getName(e)}function queryKey(e){for(var t=[],n=0;n<e.length;n++){var s=e[n];if("object"==typeof s){var o="not"===s.operator?"!":s.operator;t.push(o+getName(s.Component))}else t.push(getName(s))}return t.sort().join("-")}const hasWindow="undefined"!=typeof window,now=hasWindow&&void 0!==window.performance?performance.now.bind(performance):Date.now.bind(Date);class EventDispatcher{constructor(){this._listeners={},this.stats={fired:0,handled:0}}addEventListener(e,t){let n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){return void 0!==this._listeners[e]&&-1!==this._listeners[e].indexOf(t)}removeEventListener(e,t){var n=this._listeners[e];if(void 0!==n){var s=n.indexOf(t);-1!==s&&n.splice(s,1)}}dispatchEvent(e,t,n){this.stats.fired++;var s=this._listeners[e];if(void 0!==s)for(var o=s.slice(0),i=0;i<o.length;i++)o[i].call(this,t,n)}resetCounters(){this.stats.fired=this.stats.handled=0}}class Query{constructor(e,t){if(this.Components=[],this.NotComponents=[],e.forEach(e=>{"object"==typeof e?this.NotComponents.push(e.Component):this.Components.push(e)}),0===this.Components.length)throw new Error("Can't create a query without components");this.entities=[],this.eventDispatcher=new EventDispatcher,this.reactive=!1,this.key=queryKey(e);for(var n=0;n<t._entities.length;n++){var s=t._entities[n];this.match(s)&&(s.queries.push(this),this.entities.push(s))}}addEntity(e){e.queries.push(this),this.entities.push(e),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED,e)}removeEntity(e){let t=this.entities.indexOf(e);~t&&(this.entities.splice(t,1),t=e.queries.indexOf(this),e.queries.splice(t,1),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_REMOVED,e))}match(e){return e.hasAllComponents(this.Components)&&!e.hasAnyComponents(this.NotComponents)}toJSON(){return{key:this.key,reactive:this.reactive,components:{included:this.Components.map(e=>e.name),not:this.NotComponents.map(e=>e.name)},numEntities:this.entities.length}}stats(){return{numComponents:this.Components.length,numEntities:this.entities.length}}}Query.prototype.ENTITY_ADDED="Query#ENTITY_ADDED",Query.prototype.ENTITY_REMOVED="Query#ENTITY_REMOVED",Query.prototype.COMPONENT_CHANGED="Query#COMPONENT_CHANGED";class System{canExecute(){if(0===this._mandatoryQueries.length)return!0;for(let e=0;e<this._mandatoryQueries.length;e++){if(0===this._mandatoryQueries[e].entities.length)return!1}return!0}constructor(e,t){if(this.world=e,this.enabled=!0,this._queries={},this.queries={},this.priority=0,this.executeTime=0,t&&t.priority&&(this.priority=t.priority),this._mandatoryQueries=[],this.initialized=!0,this.constructor.queries)for(var n in this.constructor.queries){var s=this.constructor.queries[n],o=s.components;if(!o||0===o.length)throw new Error("'components' attribute can't be empty in a query");var i=this.world.entityManager.queryComponents(o);this._queries[n]=i,!0===s.mandatory&&this._mandatoryQueries.push(i),this.queries[n]={results:i.entities};var r=["added","removed","changed"];const e={added:Query.prototype.ENTITY_ADDED,removed:Query.prototype.ENTITY_REMOVED,changed:Query.prototype.COMPONENT_CHANGED};s.listen&&r.forEach(t=>{if(this.execute||console.warn(`System '${this.constructor.name}' has defined listen events (${r.join(", ")}) for query '${n}' but it does not implement the 'execute' method.`),s.listen[t]){let o=s.listen[t];if("changed"===t){if(i.reactive=!0,!0===o){let e=this.queries[n][t]=[];i.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,t=>{-1===e.indexOf(t)&&e.push(t)})}else if(Array.isArray(o)){let e=this.queries[n][t]=[];i.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,(t,n)=>{-1!==o.indexOf(n.constructor)&&-1===e.indexOf(t)&&e.push(t)})}}else{let s=this.queries[n][t]=[];i.eventDispatcher.addEventListener(e[t],e=>{-1===s.indexOf(e)&&s.push(e)})}}})}}stop(){this.executeTime=0,this.enabled=!1}play(){this.enabled=!0}clearEvents(){for(let t in this.queries){var e=this.queries[t];if(e.added&&(e.added.length=0),e.removed&&(e.removed.length=0),e.changed)if(Array.isArray(e.changed))e.changed.length=0;else for(let t in e.changed)e.changed[t].length=0}}toJSON(){var e={name:this.constructor.name,enabled:this.enabled,executeTime:this.executeTime,priority:this.priority,queries:{}};if(this.constructor.queries){var t=this.constructor.queries;for(let n in t){let s=this.queries[n],o=t[n],i=e.queries[n]={key:this._queries[n].key};if(i.mandatory=!0===o.mandatory,i.reactive=o.listen&&(!0===o.listen.added||!0===o.listen.removed||!0===o.listen.changed||Array.isArray(o.listen.changed)),i.reactive){i.listen={},["added","removed","changed"].forEach(e=>{s[e]&&(i.listen[e]={entities:s[e].length})})}}}return e}}function Not(e){return{operator:"not",Component:e}}class SystemManager{constructor(e){this._systems=[],this._executeSystems=[],this.world=e,this.lastExecutedSystem=null}registerSystem(e,t){if(!(e.prototype instanceof System))throw new Error(`System '${e.name}' does not extends 'System' class`);if(void 0!==this.getSystem(e))return console.warn(`System '${e.name}' already registered.`),this;var n=new e(this.world,t);return n.init&&n.init(t),n.order=this._systems.length,this._systems.push(n),n.execute&&(this._executeSystems.push(n),this.sortSystems()),this}unregisterSystem(e){let t=this.getSystem(e);return void 0===t?(console.warn(`Can unregister system '${e.name}'. It doesn't exist.`),this):(this._systems.splice(this._systems.indexOf(t),1),t.execute&&this._executeSystems.splice(this._executeSystems.indexOf(t),1),this)}sortSystems(){this._executeSystems.sort((e,t)=>e.priority-t.priority||e.order-t.order)}getSystem(e){return this._systems.find(t=>t instanceof e)}getSystems(){return this._systems}removeSystem(e){var t=this._systems.indexOf(e);~t&&this._systems.splice(t,1)}executeSystem(e,t,n){if(e.initialized&&e.canExecute()){let s=now();e.execute(t,n),e.executeTime=now()-s,this.lastExecutedSystem=e,e.clearEvents()}}stop(){this._executeSystems.forEach(e=>e.stop())}execute(e,t,n){this._executeSystems.forEach(s=>(n||s.enabled)&&this.executeSystem(s,e,t))}stats(){for(var e={numSystems:this._systems.length,systems:{}},t=0;t<this._systems.length;t++){var n=this._systems[t],s=e.systems[n.constructor.name]={queries:{},executeTime:n.executeTime};for(var o in n.ctx)s.queries[o]=n.ctx[o].stats()}return e}}class ObjectPool{constructor(e,t){this.freeList=[],this.count=0,this.T=e,this.isObjectPool=!0;var n=null;arguments.length>1&&(n=Array.prototype.slice.call(arguments)).shift(),this.createElement=n?()=>new e(...n):()=>new e,void 0!==t&&this.expand(t)}acquire(){return this.freeList.length<=0&&this.expand(Math.round(.2*this.count)+1),this.freeList.pop()}release(e){e.reset(),this.freeList.push(e)}expand(e){for(var t=0;t<e;t++)this.freeList.push(this.createElement());this.count+=e}totalSize(){return this.count}totalFree(){return this.freeList.length}totalUsed(){return this.count-this.freeList.length}}class QueryManager{constructor(e){this._world=e,this._queries={}}onEntityRemoved(e){for(var t in this._queries){var n=this._queries[t];-1!==e.queries.indexOf(n)&&n.removeEntity(e)}}onEntityComponentAdded(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&~s.entities.indexOf(e)?s.removeEntity(e):~s.Components.indexOf(t)&&s.match(e)&&!~s.entities.indexOf(e)&&s.addEntity(e)}}onEntityComponentRemoved(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&!~s.entities.indexOf(e)&&s.match(e)?s.addEntity(e):~s.Components.indexOf(t)&&~s.entities.indexOf(e)&&!s.match(e)&&s.removeEntity(e)}}getQuery(e){var t=queryKey(e),n=this._queries[t];return n||(this._queries[t]=n=new Query(e,this._world)),n}stats(){var e={};for(var t in this._queries)e[t]=this._queries[t].stats();return e}}class SystemStateComponent{}SystemStateComponent.isSystemStateComponent=!0;class EntityManager{constructor(e){this.world=e,this.componentsManager=e.componentsManager,this._entities=[],this._entitiesByNames={},this._queryManager=new QueryManager(this),this.eventDispatcher=new EventDispatcher,this._entityPool=new ObjectPool(this.world.options.entityClass,this.world.options.entityPoolSize),this.entitiesWithComponentsToRemove=[],this.entitiesToRemove=[],this.deferredRemovalEnabled=!0}getEntityByName(e){return this._entitiesByNames[e]}createEntity(e){var t=this._entityPool.acquire();return t.alive=!0,t.name=e||"",e&&(this._entitiesByNames[e]?console.warn(`Entity name '${e}' already exist`):this._entitiesByNames[e]=t),t._world=this,this._entities.push(t),this.eventDispatcher.dispatchEvent(ENTITY_CREATED,t),t}entityAddComponent(e,t,n){if(~e._ComponentTypes.indexOf(t))console.warn("Component type already exists on entity.",e,t.name);else{e._ComponentTypes.push(t),t.__proto__===SystemStateComponent&&e.numStateComponents++;var s=this.world.componentsManager.getComponentsPool(t).acquire();if(e._components[t.name]=s,n)if(s.copy)s.copy(n);else for(var o in n)s[o]=n[o];this._queryManager.onEntityComponentAdded(e,t),this.world.componentsManager.componentAddedToEntity(t),this.eventDispatcher.dispatchEvent(COMPONENT_ADDED,e,t)}}entityRemoveComponent(e,t,n){var s=e._ComponentTypes.indexOf(t);if(~s){if(this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE,e,t),n)this._entityRemoveComponentSync(e,t,s);else{0===e._ComponentTypesToRemove.length&&this.entitiesWithComponentsToRemove.push(e),e._ComponentTypes.splice(s,1),e._ComponentTypesToRemove.push(t);var o=getName(t);e._componentsToRemove[o]=e._components[o],delete e._components[o]}this._queryManager.onEntityComponentRemoved(e,t),t.__proto__===SystemStateComponent&&(e.numStateComponents--,0!==e.numStateComponents||e.alive||e.remove())}}_entityRemoveComponentSync(e,t,n){e._ComponentTypes.splice(n,1);var s=componentPropertyName(t),o=getName(t),i=e._components[o];delete e._components[o],this.componentsManager._componentPool[s].release(i),this.world.componentsManager.componentRemovedFromEntity(t)}entityRemoveAllComponents(e,t){let n=e._ComponentTypes;for(let s=n.length-1;s>=0;s--)n[s].__proto__!==SystemStateComponent&&this.entityRemoveComponent(e,n[s],t)}removeEntity(e,t){var n=this._entities.indexOf(e);if(!~n)throw new Error("Tried to remove entity not in list");e.alive=!1,0===e.numStateComponents&&(this.eventDispatcher.dispatchEvent(ENTITY_REMOVED,e),this._queryManager.onEntityRemoved(e),!0===t?this._releaseEntity(e,n):this.entitiesToRemove.push(e)),this.entityRemoveAllComponents(e,t)}_releaseEntity(e,t){this._entities.splice(t,1),this._entitiesByNames[e.name]&&delete this._entitiesByNames[e.name],e._world=null,this._entityPool.release(e)}removeAllEntities(){for(var e=this._entities.length-1;e>=0;e--)this.removeEntity(this._entities[e])}processDeferredRemoval(){if(this.deferredRemovalEnabled){for(let e=0;e<this.entitiesToRemove.length;e++){let t=this.entitiesToRemove[e],n=this._entities.indexOf(t);this._releaseEntity(t,n)}this.entitiesToRemove.length=0;for(let s=0;s<this.entitiesWithComponentsToRemove.length;s++){let o=this.entitiesWithComponentsToRemove[s];for(;o._ComponentTypesToRemove.length>0;){let s=o._ComponentTypesToRemove.pop();var e=componentPropertyName(s),t=getName(s),n=o._componentsToRemove[t];delete o._componentsToRemove[t],this.componentsManager._componentPool[e].release(n),this.world.componentsManager.componentRemovedFromEntity(s)}}this.entitiesWithComponentsToRemove.length=0}}queryComponents(e){return this._queryManager.getQuery(e)}count(){return this._entities.length}stats(){var e={numEntities:this._entities.length,numQueries:Object.keys(this._queryManager._queries).length,queries:this._queryManager.stats(),numComponentPool:Object.keys(this.componentsManager._componentPool).length,componentPool:{},eventDispatcher:this.eventDispatcher.stats};for(var t in this.componentsManager._componentPool){var n=this.componentsManager._componentPool[t];e.componentPool[t]={used:n.totalUsed(),size:n.count}}return e}}const ENTITY_CREATED="EntityManager#ENTITY_CREATE",ENTITY_REMOVED="EntityManager#ENTITY_REMOVED",COMPONENT_ADDED="EntityManager#COMPONENT_ADDED",COMPONENT_REMOVE="EntityManager#COMPONENT_REMOVE";class DummyObjectPool{constructor(e){this.isDummyObjectPool=!0,this.count=0,this.used=0,this.T=e}acquire(){return this.used++,this.count++,new this.T}release(){this.used--}totalSize(){return this.count}totalFree(){return 1/0}totalUsed(){return this.used}}class ComponentManager{constructor(){this.Components={},this._componentPool={},this.numComponents={}}registerComponent(e){this.Components[e.name]?console.warn(`Component type: '${e.name}' already registered.`):(this.Components[e.name]=e,this.numComponents[e.name]=0)}componentAddedToEntity(e){this.Components[e.name]||this.registerComponent(e),this.numComponents[e.name]++}componentRemovedFromEntity(e){this.numComponents[e.name]--}getComponentsPool(e){var t=componentPropertyName(e);return this._componentPool[t]||(e.prototype.reset?this._componentPool[t]=new ObjectPool(e):(console.warn(`Component '${e.name}' won't benefit from pooling because 'reset' method was not implemented.`),this._componentPool[t]=new DummyObjectPool(e))),this._componentPool[t]}}var name="test-ecsy-build",version="0.2.8",description="Entity Component System in JS",main="lib/index.js",module="src/index.js",types="src/index.d.ts",scripts={build:"rollup -c && npm run docs && npm run build:cjs && rimraf site/build && cp -r build site/build","build:cjs":"rimraf lib && babel src -d lib",docs:"rimraf site/docs/api/_sidebar.md; typedoc --readme none --mode file --excludeExternals --plugin typedoc-plugin-markdown  --theme site/docs/theme --hideSources --hideBreadcrumbs --out site/docs/api/ --includeDeclarations --includes 'src/**/*.d.ts' src; touch site/docs/api/_sidebar.md","dev:docs":"nodemon -e ts -x 'npm run docs' -w src",dev:"concurrently --names 'ROLLUP,DOCS,HTTP' -c 'bgBlue.bold,bgYellow.bold,bgGreen.bold' 'rollup -c -w -m inline' 'npm run dev:docs' 'npm run dev:server'","dev:server":"http-server -c-1 -p 8080 --cors ./site",lint:"eslint src test examples",start:"npm run dev",deploy:"np",postdeploy:"gh-pages -d site",benchmarks:"node -r esm --expose-gc benchmarks/index.js",test:"ava",travis:"npm run lint && npm run test && npm run build","watch:test":"ava --watch"},repository={type:"git",url:"git+https://github.com/robertlong/ecsy.git"},keywords=["ecs","entity component system"],author="Mozilla Reality <mr-internal@mozilla.com> (https://mixedreality.mozilla.org)",license="MIT",bugs={url:"https://github.com/robertlong/ecsy/issues"},ava={files:["test/**/*.test.js"],require:["esm"]},files=["build","lib","src"],homepage="https://github.com/robertlong/ecsy#readme",devDependencies={"@babel/cli":"^7.10.1","@babel/core":"^7.10.2","@babel/plugin-transform-modules-commonjs":"^7.10.1","@rollup/plugin-node-resolve":"^8.0.1",ava:"^3.9.0","babel-eslint":"^10.0.3","benchmarker-js":"0.0.1",concurrently:"^4.1.2","docsify-cli":"^4.4.0",eslint:"^5.16.0","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.2",esm:"^3.2.25","gh-pages":"^3.0.0","http-server":"^0.11.1",nodemon:"^1.19.4",np:"^6.2.4",prettier:"^1.19.1",rimraf:"^3.0.2",rollup:"^1.29.0","rollup-plugin-copy":"^3.3.0","rollup-plugin-json":"^4.0.0","rollup-plugin-sourcemaps":"^0.6.2","rollup-plugin-terser":"^5.2.0",typedoc:"^0.15.8","typedoc-plugin-markdown":"^2.2.16",typescript:"^3.7.5"},pjson={name:name,version:version,description:description,main:main,module:module,types:types,scripts:scripts,repository:repository,keywords:keywords,author:author,license:license,bugs:bugs,ava:ava,files:files,homepage:homepage,devDependencies:devDependencies};const Version=pjson.version;var nextId=0;class Entity{constructor(e){this._world=e||null,this.id=nextId++,this._ComponentTypes=[],this._components={},this._componentsToRemove={},this.queries=[],this._ComponentTypesToRemove=[],this.alive=!1,this.numStateComponents=0}getComponent(e,t){var n=this._components[e.name];return n||!0!==t||(n=this._componentsToRemove[e.name]),n}getRemovedComponent(e){return this._componentsToRemove[e.name]}getComponents(){return this._components}getComponentsToRemove(){return this._componentsToRemove}getComponentTypes(){return this._ComponentTypes}getMutableComponent(e){for(var t=this._components[e.name],n=0;n<this.queries.length;n++){var s=this.queries[n];s.reactive&&-1!==s.Components.indexOf(e)&&s.eventDispatcher.dispatchEvent(Query.prototype.COMPONENT_CHANGED,this,t)}return t}addComponent(e,t){return this._world.entityAddComponent(this,e,t),this}removeComponent(e,t){return this._world.entityRemoveComponent(this,e,t),this}hasComponent(e,t){return!!~this._ComponentTypes.indexOf(e)||!0===t&&this.hasRemovedComponent(e)}hasRemovedComponent(e){return!!~this._ComponentTypesToRemove.indexOf(e)}hasAllComponents(e){for(var t=0;t<e.length;t++)if(!this.hasComponent(e[t]))return!1;return!0}hasAnyComponents(e){for(var t=0;t<e.length;t++)if(this.hasComponent(e[t]))return!0;return!1}removeAllComponents(e){return this._world.entityRemoveAllComponents(this,e)}reset(){this.id=nextId++,this._world=null,this._ComponentTypes.length=0,this.queries.length=0,this._components={}}remove(e){return this._world.removeEntity(this,e)}}const DEFAULT_OPTIONS={entityPoolSize:0,entityClass:Entity};class World{constructor(e={}){if(this.options=Object.assign({},DEFAULT_OPTIONS,e),this.componentsManager=new ComponentManager(this),this.entityManager=new EntityManager(this),this.systemManager=new SystemManager(this),this.enabled=!0,this.eventQueues={},hasWindow&&"undefined"!=typeof CustomEvent){var t=new CustomEvent("ecsy-world-created",{detail:{world:this,version:Version}});window.dispatchEvent(t)}this.lastTime=now()}registerComponent(e){return this.componentsManager.registerComponent(e),this}registerSystem(e,t){return this.systemManager.registerSystem(e,t),this}unregisterSystem(e){return this.systemManager.unregisterSystem(e),this}getSystem(e){return this.systemManager.getSystem(e)}getSystems(){return this.systemManager.getSystems()}execute(e,t){e||(e=(t=now())-this.lastTime,this.lastTime=t),this.enabled&&(this.systemManager.execute(e,t),this.entityManager.processDeferredRemoval())}stop(){this.enabled=!1}play(){this.enabled=!0}createEntity(e){return this.entityManager.createEntity(e)}stats(){var e={entities:this.entityManager.stats(),system:this.systemManager.stats()};console.log(JSON.stringify(e,null,2))}}class Component{}Component.isComponent=!0;class TagComponent{reset(){}}function createType(e){var t=["create","reset","clear"].filter(t=>!e[t]);if(t.length>0)throw new Error(`createType expect type definition to implements the following functions: ${t.join(", ")}`);return e.isType=!0,e}TagComponent.isTagComponent=!0;var Types={};Types.Number=createType({baseType:Number,isSimpleType:!0,create:e=>void 0!==e?e:0,reset:(e,t,n)=>{e[t]=void 0!==n?n:0},clear:(e,t)=>{e[t]=0}}),Types.Boolean=createType({baseType:Boolean,isSimpleType:!0,create:e=>void 0!==e&&e,reset:(e,t,n)=>{e[t]=void 0!==n&&n},clear:(e,t)=>{e[t]=!1}}),Types.String=createType({baseType:String,isSimpleType:!0,create:e=>void 0!==e?e:"",reset:(e,t,n)=>{e[t]=void 0!==n?n:""},clear:(e,t)=>{e[t]=""}}),Types.Array=createType({baseType:Array,create:e=>void 0!==e?e.slice():[],reset:(e,t,n)=>{void 0!==n?e[t]=n.slice():e[t].length=0},clear:(e,t)=>{e[t].length=0},copy:(e,t,n)=>{e[n]=t[n].slice()}});var standardTypes={number:Types.Number,boolean:Types.Boolean,string:Types.String};function inferType(e){return Array.isArray(e)?Types.Array:standardTypes[typeof e]?standardTypes[typeof e]:null}function createComponentClass(e,t){for(let t in e){e[t].type||(e[t].type=inferType(e[t].default))}var n=function(){for(let n in e){var t=e[n];let s=t.type;s&&s.isType?this[n]=s.create(t.default):this[n]=t.default}};void 0!==t&&Object.defineProperty(n,"name",{value:t}),n.prototype.schema=e;var s=!0;for(let t in e){var o=e[t];o.type||(o.type=inferType(o.default)),o.type||(console.warn(`Unknown type definition for attribute '${t}'`),s=!1)}if(s){n.prototype.copy=function(t){for(let n in e)if(t[n]){let s=e[n].type;s.isSimpleType?this[n]=t[n]:s.copy?s.copy(this,t,n):console.warn(`Unknown copy function for attribute '${n}' data type`)}},n.prototype.reset=function(){for(let t in e){let n=e[t],s=n.type;s.reset&&s.reset(this,t,n.default)}},n.prototype.clear=function(){for(let t in e){let n=e[t].type;n.clear&&n.clear(this,t)}};for(let t in e){let s=e[t],o=s.type;n.prototype[t]=s.default,o.reset&&o.reset(n.prototype,t,s.default)}}else for(var i in console.warn("This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'"),e){let t=e[i];n.prototype[i]=t.default}return n}function generateId(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",s=n.length,o=0;o<e;o++)t+=n.charAt(Math.floor(Math.random()*s));return t}function injectScript(e,t){var n=document.createElement("script");n.src=e,n.onload=t,(document.head||document.documentElement).appendChild(n)}function hookConsoleAndErrors(e){["error","warning","log"].forEach(t=>{if("function"==typeof console[t]){var n=console[t].bind(console);console[t]=(...s)=>(e.send({method:"console",type:t,args:JSON.stringify(s)}),n.apply(null,s))}}),window.addEventListener("error",t=>{e.send({method:"error",error:JSON.stringify({message:t.error.message,stack:t.error.stack})})})}function includeRemoteIdHTML(e){let t=document.createElement("div");return t.style.cssText="\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  ",t.innerHTML=`Open ECSY devtools to connect to this page using the code:&nbsp;<b style="color: #fff">${e}</b>&nbsp;<button onClick="generateNewCode()">Generate new code</button>`,document.body.appendChild(t),t}function enableRemoteDevtools(remoteId){if(!hasWindow)return void console.warn("Remote devtools not available outside the browser");window.generateNewCode=()=>{window.localStorage.clear(),remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId),window.location.reload(!1)},remoteId=remoteId||window.localStorage.getItem("ecsyRemoteId"),remoteId||(remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId));let infoDiv=includeRemoteIdHTML(remoteId);window.__ECSY_REMOTE_DEVTOOLS_INJECTED=!0,window.__ECSY_REMOTE_DEVTOOLS={};let Version="",worldsBeforeLoading=[],onWorldCreated=e=>{var t=e.detail.world;Version=e.detail.version,worldsBeforeLoading.push(t)};window.addEventListener("ecsy-world-created",onWorldCreated);let onLoaded=()=>{var peer=new Peer(remoteId);peer.on("open",()=>{peer.on("connection",connection=>{window.__ECSY_REMOTE_DEVTOOLS.connection=connection,connection.on("open",(function(){infoDiv.innerHTML="Connected",connection.on("data",(function(data){if("init"===data.type){var script=document.createElement("script");script.setAttribute("type","text/javascript"),script.onload=()=>{script.parentNode.removeChild(script),window.removeEventListener("ecsy-world-created",onWorldCreated),worldsBeforeLoading.forEach(e=>{var t=new CustomEvent("ecsy-world-created",{detail:{world:e,version:Version}});window.dispatchEvent(t)})},script.innerHTML=data.script,(document.head||document.documentElement).appendChild(script),script.onload(),hookConsoleAndErrors(connection)}else if("executeScript"===data.type){let value=eval(data.script);data.returnEval&&connection.send({method:"evalReturn",value:value})}}))}))})})};injectScript("https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js",onLoaded)}if(hasWindow){const e=new URLSearchParams(window.location.search);e.has("enable-remote-devtools")&&enableRemoteDevtools()}exports.Component=Component,exports.Not=Not,exports.System=System,exports.SystemStateComponent=SystemStateComponent,exports.TagComponent=TagComponent,exports.Types=Types,exports.Version=Version,exports.World=World,exports._Entity=Entity,exports.createComponentClass=createComponentClass,exports.createType=createType,exports.enableRemoteDevtools=enableRemoteDevtools,Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
