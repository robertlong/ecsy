{"version":3,"file":"ecsy.module.min.js","sources":["../../src/Utils.js","../../src/EventDispatcher.js","../../src/Query.js","../../src/System.js","../../src/SystemManager.js","../../src/ObjectPool.js","../../src/QueryManager.js","../../src/SystemStateComponent.js","../../src/EntityManager.js","../../src/DummyObjectPool.js","../../src/ComponentManager.js","../../src/Version.js","../../src/Entity.js","../../src/World.js","../../src/Component.js","../../src/TagComponent.js","../../src/CreateType.js","../../src/StandardTypes.js","../../src/InferType.js","../../src/CreateComponentClass.js","../../src/RemoteDevTools/utils.js","../../src/RemoteDevTools/index.js"],"sourcesContent":["/**\n * Return the name of a component\n * @param {Component} Component\n * @private\n */\nexport function getName(Component) {\n  return Component.name;\n}\n\n/**\n * Return a valid property name for the Component\n * @param {Component} Component\n * @private\n */\nexport function componentPropertyName(Component) {\n  return getName(Component);\n}\n\n/**\n * Get a key from a list of components\n * @param {Array(Component)} Components Array of components to generate the key\n * @private\n */\nexport function queryKey(Components) {\n  var names = [];\n  for (var n = 0; n < Components.length; n++) {\n    var T = Components[n];\n    if (typeof T === \"object\") {\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\n      names.push(operator + getName(T.Component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names.sort().join(\"-\");\n}\n\n// Detector for browser's \"window\"\nexport const hasWindow = typeof window !== \"undefined\";\n\n// performance.now() \"polyfill\"\nexport const now =\n  hasWindow && typeof window.performance !== \"undefined\"\n    ? performance.now.bind(performance)\n    : Date.now.bind(Date);\n","/**\n * @private\n * @class EventDispatcher\n */\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = {};\n    this.stats = {\n      fired: 0,\n      handled: 0\n    };\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} eventName Name of the event to listen\n   * @param {Function} listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName, listener) {\n    let listeners = this._listeners;\n    if (listeners[eventName] === undefined) {\n      listeners[eventName] = [];\n    }\n\n    if (listeners[eventName].indexOf(listener) === -1) {\n      listeners[eventName].push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param {String} eventName Name of the event to check\n   * @param {Function} listener Callback for the specified event\n   */\n  hasEventListener(eventName, listener) {\n    return (\n      this._listeners[eventName] !== undefined &&\n      this._listeners[eventName].indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param {String} eventName Name of the event to remove\n   * @param {Function} listener Callback for the specified event\n   */\n  removeEventListener(eventName, listener) {\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {String} eventName Name of the event to dispatch\n   * @param {Entity} entity (Optional) Entity to emit\n   * @param {Component} component\n   */\n  dispatchEvent(eventName, entity, component) {\n    this.stats.fired++;\n\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var array = listenerArray.slice(0);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i].call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n","import EventDispatcher from \"./EventDispatcher.js\";\nimport { queryKey } from \"./Utils.js\";\n\nexport default class Query {\n  /**\n   * @param {Array(Component)} Components List of types of components to query\n   */\n  constructor(Components, manager) {\n    this.Components = [];\n    this.NotComponents = [];\n\n    Components.forEach(component => {\n      if (typeof component === \"object\") {\n        this.NotComponents.push(component.Component);\n      } else {\n        this.Components.push(component);\n      }\n    });\n\n    if (this.Components.length === 0) {\n      throw new Error(\"Can't create a query without components\");\n    }\n\n    this.entities = [];\n\n    this.eventDispatcher = new EventDispatcher();\n\n    // This query is being used by a reactive system\n    this.reactive = false;\n\n    this.key = queryKey(Components);\n\n    // Fill the query with the existing entities\n    for (var i = 0; i < manager._entities.length; i++) {\n      var entity = manager._entities[i];\n      if (this.match(entity)) {\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   * @param {Entity} entity\n   */\n  removeEntity(entity) {\n    let index = this.entities.indexOf(entity);\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(\n        Query.prototype.ENTITY_REMOVED,\n        entity\n      );\n    }\n  }\n\n  match(entity) {\n    return (\n      entity.hasAllComponents(this.Components) &&\n      !entity.hasAnyComponents(this.NotComponents)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.Components.map(C => C.name),\n        not: this.NotComponents.map(C => C.name)\n      },\n      numEntities: this.entities.length\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.Components.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\n","import Query from \"./Query.js\";\n\nexport class System {\n  canExecute() {\n    if (this._mandatoryQueries.length === 0) return true;\n\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\n      var query = this._mandatoryQueries[i];\n      if (query.entities.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  constructor(world, attributes) {\n    this.world = world;\n    this.enabled = true;\n\n    // @todo Better naming :)\n    this._queries = {};\n    this.queries = {};\n\n    this.priority = 0;\n\n    // Used for stats\n    this.executeTime = 0;\n\n    if (attributes && attributes.priority) {\n      this.priority = attributes.priority;\n    }\n\n    this._mandatoryQueries = [];\n\n    this.initialized = true;\n\n    if (this.constructor.queries) {\n      for (var queryName in this.constructor.queries) {\n        var queryConfig = this.constructor.queries[queryName];\n        var Components = queryConfig.components;\n        if (!Components || Components.length === 0) {\n          throw new Error(\"'components' attribute can't be empty in a query\");\n        }\n        var query = this.world.entityManager.queryComponents(Components);\n        this._queries[queryName] = query;\n        if (queryConfig.mandatory === true) {\n          this._mandatoryQueries.push(query);\n        }\n        this.queries[queryName] = {\n          results: query.entities\n        };\n\n        // Reactive configuration added/removed/changed\n        var validEvents = [\"added\", \"removed\", \"changed\"];\n\n        const eventMapping = {\n          added: Query.prototype.ENTITY_ADDED,\n          removed: Query.prototype.ENTITY_REMOVED,\n          changed: Query.prototype.COMPONENT_CHANGED // Query.prototype.ENTITY_CHANGED\n        };\n\n        if (queryConfig.listen) {\n          validEvents.forEach(eventName => {\n            if (!this.execute) {\n              console.warn(\n                `System '${\n                  this.constructor.name\n                }' has defined listen events (${validEvents.join(\n                  \", \"\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\n              );\n            }\n\n            // Is the event enabled on this system's query?\n            if (queryConfig.listen[eventName]) {\n              let event = queryConfig.listen[eventName];\n\n              if (eventName === \"changed\") {\n                query.reactive = true;\n                if (event === true) {\n                  // Any change on the entity from the components in the query\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    entity => {\n                      // Avoid duplicates\n                      if (eventList.indexOf(entity) === -1) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else if (Array.isArray(event)) {\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity, changedComponent) => {\n                      // Avoid duplicates\n                      if (\n                        event.indexOf(changedComponent.constructor) !== -1 &&\n                        eventList.indexOf(entity) === -1\n                      ) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else {\n                  /*\n                  // Checking just specific components\n                  let changedList = (this.queries[queryName][eventName] = {});\n                  event.forEach(component => {\n                    let eventList = (changedList[\n                      componentPropertyName(component)\n                    ] = []);\n                    query.eventDispatcher.addEventListener(\n                      Query.prototype.COMPONENT_CHANGED,\n                      (entity, changedComponent) => {\n                        if (\n                          changedComponent.constructor === component &&\n                          eventList.indexOf(entity) === -1\n                        ) {\n                          eventList.push(entity);\n                        }\n                      }\n                    );\n                  });\n                  */\n                }\n              } else {\n                let eventList = (this.queries[queryName][eventName] = []);\n\n                query.eventDispatcher.addEventListener(\n                  eventMapping[eventName],\n                  entity => {\n                    // @fixme overhead?\n                    if (eventList.indexOf(entity) === -1)\n                      eventList.push(entity);\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  stop() {\n    this.executeTime = 0;\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  // @question rename to clear queues?\n  clearEvents() {\n    for (let queryName in this.queries) {\n      var query = this.queries[queryName];\n      if (query.added) {\n        query.added.length = 0;\n      }\n      if (query.removed) {\n        query.removed.length = 0;\n      }\n      if (query.changed) {\n        if (Array.isArray(query.changed)) {\n          query.changed.length = 0;\n        } else {\n          for (let name in query.changed) {\n            query.changed[name].length = 0;\n          }\n        }\n      }\n    }\n  }\n\n  toJSON() {\n    var json = {\n      name: this.constructor.name,\n      enabled: this.enabled,\n      executeTime: this.executeTime,\n      priority: this.priority,\n      queries: {}\n    };\n\n    if (this.constructor.queries) {\n      var queries = this.constructor.queries;\n      for (let queryName in queries) {\n        let query = this.queries[queryName];\n        let queryDefinition = queries[queryName];\n        let jsonQuery = (json.queries[queryName] = {\n          key: this._queries[queryName].key\n        });\n\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\n        jsonQuery.reactive =\n          queryDefinition.listen &&\n          (queryDefinition.listen.added === true ||\n            queryDefinition.listen.removed === true ||\n            queryDefinition.listen.changed === true ||\n            Array.isArray(queryDefinition.listen.changed));\n\n        if (jsonQuery.reactive) {\n          jsonQuery.listen = {};\n\n          const methods = [\"added\", \"removed\", \"changed\"];\n          methods.forEach(method => {\n            if (query[method]) {\n              jsonQuery.listen[method] = {\n                entities: query[method].length\n              };\n            }\n          });\n        }\n      }\n    }\n\n    return json;\n  }\n}\n\nexport function Not(Component) {\n  return {\n    operator: \"not\",\n    Component: Component\n  };\n}\n","import { now } from \"./Utils.js\";\nimport { System } from \"./System.js\";\n\nexport class SystemManager {\n  constructor(world) {\n    this._systems = [];\n    this._executeSystems = []; // Systems that have `execute` method\n    this.world = world;\n    this.lastExecutedSystem = null;\n  }\n\n  registerSystem(SystemClass, attributes) {\n    if (!(SystemClass.prototype instanceof System)) {\n      throw new Error(\n        `System '${SystemClass.name}' does not extends 'System' class`\n      );\n    }\n    if (this.getSystem(SystemClass) !== undefined) {\n      console.warn(`System '${SystemClass.name}' already registered.`);\n      return this;\n    }\n\n    var system = new SystemClass(this.world, attributes);\n    if (system.init) system.init(attributes);\n    system.order = this._systems.length;\n    this._systems.push(system);\n    if (system.execute) {\n      this._executeSystems.push(system);\n      this.sortSystems();\n    }\n    return this;\n  }\n\n  unregisterSystem(SystemClass) {\n    let system = this.getSystem(SystemClass);\n    if (system === undefined) {\n      console.warn(\n        `Can unregister system '${SystemClass.name}'. It doesn't exist.`\n      );\n      return this;\n    }\n\n    this._systems.splice(this._systems.indexOf(system), 1);\n\n    if (system.execute) {\n      this._executeSystems.splice(this._executeSystems.indexOf(system), 1);\n    }\n\n    // @todo Add system.unregister() call to free resources\n    return this;\n  }\n\n  sortSystems() {\n    this._executeSystems.sort((a, b) => {\n      return a.priority - b.priority || a.order - b.order;\n    });\n  }\n\n  getSystem(SystemClass) {\n    return this._systems.find(s => s instanceof SystemClass);\n  }\n\n  getSystems() {\n    return this._systems;\n  }\n\n  removeSystem(SystemClass) {\n    var index = this._systems.indexOf(SystemClass);\n    if (!~index) return;\n\n    this._systems.splice(index, 1);\n  }\n\n  executeSystem(system, delta, time) {\n    if (system.initialized) {\n      if (system.canExecute()) {\n        let startTime = now();\n        system.execute(delta, time);\n        system.executeTime = now() - startTime;\n        this.lastExecutedSystem = system;\n        system.clearEvents();\n      }\n    }\n  }\n\n  stop() {\n    this._executeSystems.forEach(system => system.stop());\n  }\n\n  execute(delta, time, forcePlay) {\n    this._executeSystems.forEach(\n      system =>\n        (forcePlay || system.enabled) && this.executeSystem(system, delta, time)\n    );\n  }\n\n  stats() {\n    var stats = {\n      numSystems: this._systems.length,\n      systems: {}\n    };\n\n    for (var i = 0; i < this._systems.length; i++) {\n      var system = this._systems[i];\n      var systemStats = (stats.systems[system.constructor.name] = {\n        queries: {},\n        executeTime: system.executeTime\n      });\n      for (var name in system.ctx) {\n        systemStats.queries[name] = system.ctx[name].stats();\n      }\n    }\n\n    return stats;\n  }\n}\n","export default class ObjectPool {\n  // @todo Add initial size\n  constructor(T, initialSize) {\n    this.freeList = [];\n    this.count = 0;\n    this.T = T;\n    this.isObjectPool = true;\n\n    var extraArgs = null;\n    if (arguments.length > 1) {\n      extraArgs = Array.prototype.slice.call(arguments);\n      extraArgs.shift();\n    }\n\n    this.createElement = extraArgs\n      ? () => {\n          return new T(...extraArgs);\n        }\n      : () => {\n          return new T();\n        };\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  acquire() {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    var item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item) {\n    item.reset();\n    this.freeList.push(item);\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      this.freeList.push(this.createElement());\n    }\n    this.count += count;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return this.freeList.length;\n  }\n\n  totalUsed() {\n    return this.count - this.freeList.length;\n  }\n}\n","import Query from \"./Query.js\";\nimport { queryKey } from \"./Utils.js\";\n\n/**\n * @private\n * @class QueryManager\n */\nexport default class QueryManager {\n  constructor(world) {\n    this._world = world;\n\n    // Queries indexed by a unique identifier for the components it has\n    this._queries = {};\n  }\n\n  onEntityRemoved(entity) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param {Entity} entity Entity that just got the new component\n   * @param {Component} Component Component added to the entity\n   */\n  onEntityComponentAdded(entity, Component) {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        ~query.entities.indexOf(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n      // Add the entity only if:\n      // Component is in the query\n      // and Entity has ALL the components of the query\n      // and Entity is not already in the query\n      if (\n        !~query.Components.indexOf(Component) ||\n        !query.match(entity) ||\n        ~query.entities.indexOf(entity)\n      )\n        continue;\n\n      query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param {Entity} entity Entity to remove the component from\n   * @param {Component} Component Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity, Component) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.Components.indexOf(Component) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param {Component} Components Components that the query should have\n   */\n  getQuery(Components) {\n    var key = queryKey(Components);\n    var query = this._queries[key];\n    if (!query) {\n      this._queries[key] = query = new Query(Components, this._world);\n    }\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats() {\n    var stats = {};\n    for (var queryName in this._queries) {\n      stats[queryName] = this._queries[queryName].stats();\n    }\n    return stats;\n  }\n}\n","export class SystemStateComponent {}\n\nSystemStateComponent.isSystemStateComponent = true;\n","import ObjectPool from \"./ObjectPool.js\";\nimport QueryManager from \"./QueryManager.js\";\nimport EventDispatcher from \"./EventDispatcher.js\";\nimport { componentPropertyName, getName } from \"./Utils.js\";\nimport { SystemStateComponent } from \"./SystemStateComponent.js\";\n\n/**\n * @private\n * @class EntityManager\n */\nexport class EntityManager {\n  constructor(world) {\n    this.world = world;\n    this.componentsManager = world.componentsManager;\n\n    // All the entities in this instance\n    this._entities = [];\n\n    this._entitiesByNames = {};\n\n    this._queryManager = new QueryManager(this);\n    this.eventDispatcher = new EventDispatcher();\n    this._entityPool = new ObjectPool(\n      this.world.options.entityClass,\n      this.world.options.entityPoolSize\n    );\n\n    // Deferred deletion\n    this.entitiesWithComponentsToRemove = [];\n    this.entitiesToRemove = [];\n    this.deferredRemovalEnabled = true;\n  }\n\n  getEntityByName(name) {\n    return this._entitiesByNames[name];\n  }\n\n  /**\n   * Create a new entity\n   */\n  createEntity(name) {\n    var entity = this._entityPool.acquire();\n    entity.alive = true;\n    entity.name = name || \"\";\n    if (name) {\n      if (this._entitiesByNames[name]) {\n        console.warn(`Entity name '${name}' already exist`);\n      } else {\n        this._entitiesByNames[name] = entity;\n      }\n    }\n\n    entity._world = this;\n    this._entities.push(entity);\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param {Entity} entity Entity where the component will be added\n   * @param {Component} Component Component to be added to the entity\n   * @param {Object} values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity, Component, values) {\n    if (~entity._ComponentTypes.indexOf(Component)) {\n      // @todo Just on debug mode\n      console.warn(\n        \"Component type already exists on entity.\",\n        entity,\n        Component.name\n      );\n      return;\n    }\n\n    entity._ComponentTypes.push(Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents++;\n    }\n\n    var componentPool = this.world.componentsManager.getComponentsPool(\n      Component\n    );\n    var component = componentPool.acquire();\n\n    entity._components[Component.name] = component;\n\n    if (values) {\n      if (component.copy) {\n        component.copy(values);\n      } else {\n        for (var name in values) {\n          component[name] = values[name];\n        }\n      }\n    }\n\n    this._queryManager.onEntityComponentAdded(entity, Component);\n    this.world.componentsManager.componentAddedToEntity(Component);\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param {Entity} entity Entity which will get removed the component\n   * @param {*} Component Component to remove from the entity\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity, Component, immediately) {\n    var index = entity._ComponentTypes.indexOf(Component);\n    if (!~index) return;\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\n\n    if (immediately) {\n      this._entityRemoveComponentSync(entity, Component, index);\n    } else {\n      if (entity._ComponentTypesToRemove.length === 0)\n        this.entitiesWithComponentsToRemove.push(entity);\n\n      entity._ComponentTypes.splice(index, 1);\n      entity._ComponentTypesToRemove.push(Component);\n\n      var componentName = getName(Component);\n      entity._componentsToRemove[componentName] =\n        entity._components[componentName];\n      delete entity._components[componentName];\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this._queryManager.onEntityComponentRemoved(entity, Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (entity.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  _entityRemoveComponentSync(entity, Component, index) {\n    // Remove T listing on entity and property ref, then free the component.\n    entity._ComponentTypes.splice(index, 1);\n    var propName = componentPropertyName(Component);\n    var componentName = getName(Component);\n    var component = entity._components[componentName];\n    delete entity._components[componentName];\n    this.componentsManager._componentPool[propName].release(component);\n    this.world.componentsManager.componentRemovedFromEntity(Component);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param {Entity} entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity, immediately) {\n    let Components = entity._ComponentTypes;\n\n    for (let j = Components.length - 1; j >= 0; j--) {\n      if (Components[j].__proto__ !== SystemStateComponent)\n        this.entityRemoveComponent(entity, Components[j], immediately);\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param {Entity} entity Entity to remove from the manager\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity, immediately) {\n    var index = this._entities.indexOf(entity);\n\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\n\n    entity.alive = false;\n\n    if (entity.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\n      this._queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this._releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n\n    this.entityRemoveAllComponents(entity, immediately);\n  }\n\n  _releaseEntity(entity, index) {\n    this._entities.splice(index, 1);\n\n    if (this._entitiesByNames[entity.name]) {\n      delete this._entitiesByNames[entity.name];\n    }\n\n    // Prevent any access and free\n    entity._world = null;\n    this._entityPool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities() {\n    for (var i = this._entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this._entities[i]);\n    }\n  }\n\n  processDeferredRemoval() {\n    if (!this.deferredRemovalEnabled) {\n      return;\n    }\n\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\n      let entity = this.entitiesToRemove[i];\n      let index = this._entities.indexOf(entity);\n      this._releaseEntity(entity, index);\n    }\n    this.entitiesToRemove.length = 0;\n\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\n      let entity = this.entitiesWithComponentsToRemove[i];\n      while (entity._ComponentTypesToRemove.length > 0) {\n        let Component = entity._ComponentTypesToRemove.pop();\n\n        var propName = componentPropertyName(Component);\n        var componentName = getName(Component);\n        var component = entity._componentsToRemove[componentName];\n        delete entity._componentsToRemove[componentName];\n        this.componentsManager._componentPool[propName].release(component);\n        this.world.componentsManager.componentRemovedFromEntity(Component);\n\n        //this._entityRemoveComponentSync(entity, Component, index);\n      }\n    }\n\n    this.entitiesWithComponentsToRemove.length = 0;\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param {Array(Component)} Components List of components that will form the query\n   */\n  queryComponents(Components) {\n    return this._queryManager.getQuery(Components);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count() {\n    return this._entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    var stats = {\n      numEntities: this._entities.length,\n      numQueries: Object.keys(this._queryManager._queries).length,\n      queries: this._queryManager.stats(),\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats\n    };\n\n    for (var cname in this.componentsManager._componentPool) {\n      var pool = this.componentsManager._componentPool[cname];\n      stats.componentPool[cname] = {\n        used: pool.totalUsed(),\n        size: pool.count\n      };\n    }\n\n    return stats;\n  }\n}\n\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\n","export default class DummyObjectPool {\n  constructor(T) {\n    this.isDummyObjectPool = true;\n    this.count = 0;\n    this.used = 0;\n    this.T = T;\n  }\n\n  acquire() {\n    this.used++;\n    this.count++;\n    return new this.T();\n  }\n\n  release() {\n    this.used--;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return Infinity;\n  }\n\n  totalUsed() {\n    return this.used;\n  }\n}\n","import ObjectPool from \"./ObjectPool.js\";\nimport DummyObjectPool from \"./DummyObjectPool.js\";\nimport { componentPropertyName } from \"./Utils.js\";\n\nexport class ComponentManager {\n  constructor() {\n    this.Components = {};\n    this._componentPool = {};\n    this.numComponents = {};\n  }\n\n  registerComponent(Component) {\n    if (this.Components[Component.name]) {\n      console.warn(`Component type: '${Component.name}' already registered.`);\n      return;\n    }\n\n    this.Components[Component.name] = Component;\n    this.numComponents[Component.name] = 0;\n  }\n\n  componentAddedToEntity(Component) {\n    if (!this.Components[Component.name]) {\n      this.registerComponent(Component);\n    }\n\n    this.numComponents[Component.name]++;\n  }\n\n  componentRemovedFromEntity(Component) {\n    this.numComponents[Component.name]--;\n  }\n\n  getComponentsPool(Component) {\n    var componentName = componentPropertyName(Component);\n\n    if (!this._componentPool[componentName]) {\n      if (Component.prototype.reset) {\n        this._componentPool[componentName] = new ObjectPool(Component);\n      } else {\n        console.warn(\n          `Component '${Component.name}' won't benefit from pooling because 'reset' method was not implemented.`\n        );\n        this._componentPool[componentName] = new DummyObjectPool(Component);\n      }\n    }\n\n    return this._componentPool[componentName];\n  }\n}\n","import pjson from \"../package.json\";\nexport const Version = pjson.version;\n","import Query from \"./Query.js\";\nimport wrapImmutableComponent from \"./WrapImmutableComponent.js\";\n\n// @todo Take this out from there or use ENV\nconst DEBUG = false;\n\nvar nextId = 0;\n\nexport class Entity {\n  constructor(world) {\n    this._world = world || null;\n\n    // Unique ID for this entity\n    this.id = nextId++;\n\n    // List of components types the entity has\n    this._ComponentTypes = [];\n\n    // Instance of the components\n    this._components = {};\n\n    this._componentsToRemove = {};\n\n    // Queries where the entity is added\n    this.queries = [];\n\n    // Used for deferred removal\n    this._ComponentTypesToRemove = [];\n\n    this.alive = false;\n\n    //if there are state components on a entity, it can't be removed completely\n    this.numStateComponents = 0;\n  }\n\n  // COMPONENTS\n\n  getComponent(Component, includeRemoved) {\n    var component = this._components[Component.name];\n\n    if (!component && includeRemoved === true) {\n      component = this._componentsToRemove[Component.name];\n    }\n\n    return DEBUG ? wrapImmutableComponent(Component, component) : component;\n  }\n\n  getRemovedComponent(Component) {\n    return this._componentsToRemove[Component.name];\n  }\n\n  getComponents() {\n    return this._components;\n  }\n\n  getComponentsToRemove() {\n    return this._componentsToRemove;\n  }\n\n  getComponentTypes() {\n    return this._ComponentTypes;\n  }\n\n  getMutableComponent(Component) {\n    var component = this._components[Component.name];\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n      // @todo accelerate this check. Maybe having query._Components as an object\n      // @todo add Not components\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          Query.prototype.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n    return component;\n  }\n\n  addComponent(Component, values) {\n    this._world.entityAddComponent(this, Component, values);\n    return this;\n  }\n\n  removeComponent(Component, forceImmediate) {\n    this._world.entityRemoveComponent(this, Component, forceImmediate);\n    return this;\n  }\n\n  hasComponent(Component, includeRemoved) {\n    return (\n      !!~this._ComponentTypes.indexOf(Component) ||\n      (includeRemoved === true && this.hasRemovedComponent(Component))\n    );\n  }\n\n  hasRemovedComponent(Component) {\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\n  }\n\n  hasAllComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (!this.hasComponent(Components[i])) return false;\n    }\n    return true;\n  }\n\n  hasAnyComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (this.hasComponent(Components[i])) return true;\n    }\n    return false;\n  }\n\n  removeAllComponents(forceImmediate) {\n    return this._world.entityRemoveAllComponents(this, forceImmediate);\n  }\n\n  // EXTRAS\n\n  // Initialize the entity. To be used when returning an entity to the pool\n  reset() {\n    this.id = nextId++;\n    this._world = null;\n    this._ComponentTypes.length = 0;\n    this.queries.length = 0;\n    this._components = {};\n  }\n\n  remove(forceImmediate) {\n    return this._world.removeEntity(this, forceImmediate);\n  }\n}\n","import { SystemManager } from \"./SystemManager.js\";\nimport { EntityManager } from \"./EntityManager.js\";\nimport { ComponentManager } from \"./ComponentManager.js\";\nimport { Version } from \"./Version.js\";\nimport { hasWindow, now } from \"./Utils.js\";\nimport { Entity } from \"./Entity.js\";\n\nconst DEFAULT_OPTIONS = {\n  entityPoolSize: 0,\n  entityClass: Entity\n};\n\nexport class World {\n  constructor(options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    this.componentsManager = new ComponentManager(this);\n    this.entityManager = new EntityManager(this);\n    this.systemManager = new SystemManager(this);\n\n    this.enabled = true;\n\n    this.eventQueues = {};\n\n    if (hasWindow && typeof CustomEvent !== \"undefined\") {\n      var event = new CustomEvent(\"ecsy-world-created\", {\n        detail: { world: this, version: Version }\n      });\n      window.dispatchEvent(event);\n    }\n\n    this.lastTime = now();\n  }\n\n  registerComponent(Component) {\n    this.componentsManager.registerComponent(Component);\n    return this;\n  }\n\n  registerSystem(System, attributes) {\n    this.systemManager.registerSystem(System, attributes);\n    return this;\n  }\n\n  unregisterSystem(System) {\n    this.systemManager.unregisterSystem(System);\n    return this;\n  }\n\n  getSystem(SystemClass) {\n    return this.systemManager.getSystem(SystemClass);\n  }\n\n  getSystems() {\n    return this.systemManager.getSystems();\n  }\n\n  execute(delta, time) {\n    if (!delta) {\n      time = now();\n      delta = time - this.lastTime;\n      this.lastTime = time;\n    }\n\n    if (this.enabled) {\n      this.systemManager.execute(delta, time);\n      this.entityManager.processDeferredRemoval();\n    }\n  }\n\n  stop() {\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  createEntity(name) {\n    return this.entityManager.createEntity(name);\n  }\n\n  stats() {\n    var stats = {\n      entities: this.entityManager.stats(),\n      system: this.systemManager.stats()\n    };\n\n    console.log(JSON.stringify(stats, null, 2));\n  }\n}\n","export class Component {}\n\nComponent.isComponent = true;\n","export class TagComponent {\n  reset() {}\n}\n\nTagComponent.isTagComponent = true;\n","export function createType(typeDefinition) {\n  var mandatoryFunctions = [\n    \"create\",\n    \"reset\",\n    \"clear\"\n    /*\"copy\"*/\n  ];\n\n  var undefinedFunctions = mandatoryFunctions.filter(f => {\n    return !typeDefinition[f];\n  });\n\n  if (undefinedFunctions.length > 0) {\n    throw new Error(\n      `createType expect type definition to implements the following functions: ${undefinedFunctions.join(\n        \", \"\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n  return typeDefinition;\n}\n","import { createType } from \"./CreateType\";\n\n/**\n * Standard types\n */\nvar Types = {};\n\nTypes.Number = createType({\n  baseType: Number,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : 0;\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = 0;\n    }\n  },\n  clear: (src, key) => {\n    src[key] = 0;\n  }\n});\n\nTypes.Boolean = createType({\n  baseType: Boolean,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : false;\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = false;\n    }\n  },\n  clear: (src, key) => {\n    src[key] = false;\n  }\n});\n\nTypes.String = createType({\n  baseType: String,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : \"\";\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = \"\";\n    }\n  },\n  clear: (src, key) => {\n    src[key] = \"\";\n  }\n});\n\nTypes.Array = createType({\n  baseType: Array,\n  create: defaultValue => {\n    if (typeof defaultValue !== \"undefined\") {\n      return defaultValue.slice();\n    }\n\n    return [];\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue.slice();\n    } else {\n      src[key].length = 0;\n    }\n  },\n  clear: (src, key) => {\n    src[key].length = 0;\n  },\n  copy: (src, dst, key) => {\n    src[key] = dst[key].slice();\n  }\n});\n\nexport { Types };\n","import { Types } from \"./StandardTypes\";\n\nvar standardTypes = {\n  number: Types.Number,\n  boolean: Types.Boolean,\n  string: Types.String\n};\n\n/**\n * Try to infer the type of the value\n * @param {*} value\n * @return {String} Type of the attribute\n * @private\n */\nexport function inferType(value) {\n  if (Array.isArray(value)) {\n    return Types.Array;\n  }\n\n  if (standardTypes[typeof value]) {\n    return standardTypes[typeof value];\n  } else {\n    return null;\n  }\n}\n","import { inferType } from \"./InferType\";\n\nexport function createComponentClass(schema, name) {\n  //var Component = new Function(`return function ${name}() {}`)();\n  for (let key in schema) {\n    let type = schema[key].type;\n    if (!type) {\n      schema[key].type = inferType(schema[key].default);\n    }\n  }\n\n  var Component = function() {\n    for (let key in schema) {\n      var attr = schema[key];\n      let type = attr.type;\n      if (type && type.isType) {\n        this[key] = type.create(attr.default);\n      } else {\n        this[key] = attr.default;\n      }\n    }\n  };\n\n  if (typeof name !== \"undefined\") {\n    Object.defineProperty(Component, \"name\", { value: name });\n  }\n\n  Component.prototype.schema = schema;\n\n  var knownTypes = true;\n  for (let key in schema) {\n    var attr = schema[key];\n    if (!attr.type) {\n      attr.type = inferType(attr.default);\n    }\n\n    var type = attr.type;\n    if (!type) {\n      console.warn(`Unknown type definition for attribute '${key}'`);\n      knownTypes = false;\n    }\n  }\n\n  if (!knownTypes) {\n    console.warn(\n      `This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'`\n    );\n\n    for (var key in schema) {\n      let attr = schema[key];\n      Component.prototype[key] = attr.default;\n    }\n  } else {\n    Component.prototype.copy = function(src) {\n      for (let key in schema) {\n        if (src[key]) {\n          let type = schema[key].type;\n          if (type.isSimpleType) {\n            this[key] = src[key];\n          } else if (type.copy) {\n            type.copy(this, src, key);\n          } else {\n            // @todo Detect that it's not possible to copy all the attributes\n            // and just avoid creating the copy function\n            console.warn(\n              `Unknown copy function for attribute '${key}' data type`\n            );\n          }\n        }\n      }\n    };\n\n    Component.prototype.reset = function() {\n      for (let key in schema) {\n        let attr = schema[key];\n        let type = attr.type;\n        if (type.reset) type.reset(this, key, attr.default);\n      }\n    };\n\n    Component.prototype.clear = function() {\n      for (let key in schema) {\n        let type = schema[key].type;\n        if (type.clear) type.clear(this, key);\n      }\n    };\n\n    for (let key in schema) {\n      let attr = schema[key];\n      let type = attr.type;\n      Component.prototype[key] = attr.default;\n\n      if (type.reset) {\n        type.reset(Component.prototype, key, attr.default);\n      }\n    }\n  }\n\n  return Component;\n}\n","export function generateId(length) {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function injectScript(src, onLoad) {\n  var script = document.createElement(\"script\");\n  // @todo Use link to the ecsy-devtools repo?\n  script.src = src;\n  script.onload = onLoad;\n  (document.head || document.documentElement).appendChild(script);\n}\n","/* global Peer */\nimport { injectScript, generateId } from \"./utils.js\";\nimport { hasWindow } from \"../Utils.js\";\n\nfunction hookConsoleAndErrors(connection) {\n  var wrapFunctions = [\"error\", \"warning\", \"log\"];\n  wrapFunctions.forEach(key => {\n    if (typeof console[key] === \"function\") {\n      var fn = console[key].bind(console);\n      console[key] = (...args) => {\n        connection.send({\n          method: \"console\",\n          type: key,\n          args: JSON.stringify(args)\n        });\n        return fn.apply(null, args);\n      };\n    }\n  });\n\n  window.addEventListener(\"error\", error => {\n    connection.send({\n      method: \"error\",\n      error: JSON.stringify({\n        message: error.error.message,\n        stack: error.error.stack\n      })\n    });\n  });\n}\n\nfunction includeRemoteIdHTML(remoteId) {\n  let infoDiv = document.createElement(\"div\");\n  infoDiv.style.cssText = `\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  `;\n\n  infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style=\"color: #fff\">${remoteId}</b>&nbsp;<button onClick=\"generateNewCode()\">Generate new code</button>`;\n  document.body.appendChild(infoDiv);\n\n  return infoDiv;\n}\n\nexport function enableRemoteDevtools(remoteId) {\n  if (!hasWindow) {\n    console.warn(\"Remote devtools not available outside the browser\");\n    return;\n  }\n\n  window.generateNewCode = () => {\n    window.localStorage.clear();\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n    window.location.reload(false);\n  };\n\n  remoteId = remoteId || window.localStorage.getItem(\"ecsyRemoteId\");\n  if (!remoteId) {\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n  }\n\n  let infoDiv = includeRemoteIdHTML(remoteId);\n\n  window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;\n  window.__ECSY_REMOTE_DEVTOOLS = {};\n\n  let Version = \"\";\n\n  // This is used to collect the worlds created before the communication is being established\n  let worldsBeforeLoading = [];\n  let onWorldCreated = e => {\n    var world = e.detail.world;\n    Version = e.detail.version;\n    worldsBeforeLoading.push(world);\n  };\n  window.addEventListener(\"ecsy-world-created\", onWorldCreated);\n\n  let onLoaded = () => {\n    var peer = new Peer(remoteId);\n    peer.on(\"open\", (/* id */) => {\n      peer.on(\"connection\", connection => {\n        window.__ECSY_REMOTE_DEVTOOLS.connection = connection;\n        connection.on(\"open\", function() {\n          // infoDiv.style.visibility = \"hidden\";\n          infoDiv.innerHTML = \"Connected\";\n\n          // Receive messages\n          connection.on(\"data\", function(data) {\n            if (data.type === \"init\") {\n              var script = document.createElement(\"script\");\n              script.setAttribute(\"type\", \"text/javascript\");\n              script.onload = () => {\n                script.parentNode.removeChild(script);\n\n                // Once the script is injected we don't need to listen\n                window.removeEventListener(\n                  \"ecsy-world-created\",\n                  onWorldCreated\n                );\n                worldsBeforeLoading.forEach(world => {\n                  var event = new CustomEvent(\"ecsy-world-created\", {\n                    detail: { world: world, version: Version }\n                  });\n                  window.dispatchEvent(event);\n                });\n              };\n              script.innerHTML = data.script;\n              (document.head || document.documentElement).appendChild(script);\n              script.onload();\n\n              hookConsoleAndErrors(connection);\n            } else if (data.type === \"executeScript\") {\n              let value = eval(data.script);\n              if (data.returnEval) {\n                connection.send({\n                  method: \"evalReturn\",\n                  value: value\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  };\n\n  // Inject PeerJS script\n  injectScript(\n    \"https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js\",\n    onLoaded\n  );\n}\n\nif (hasWindow) {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // @todo Provide a way to disable it if needed\n  if (urlParams.has(\"enable-remote-devtools\")) {\n    enableRemoteDevtools();\n  }\n}\n"],"names":["getName","Component","name","componentPropertyName","queryKey","Components","names","n","length","T","operator","push","sort","join","hasWindow","window","now","performance","bind","Date","EventDispatcher","[object Object]","this","_listeners","stats","fired","handled","eventName","listener","listeners","undefined","indexOf","listenerArray","index","splice","entity","component","array","slice","i","call","Query","manager","NotComponents","forEach","Error","entities","eventDispatcher","reactive","key","_entities","match","queries","dispatchEvent","prototype","ENTITY_ADDED","ENTITY_REMOVED","hasAllComponents","hasAnyComponents","components","included","map","C","not","numEntities","numComponents","COMPONENT_CHANGED","System","_mandatoryQueries","world","attributes","enabled","_queries","priority","executeTime","initialized","constructor","queryName","queryConfig","query","entityManager","queryComponents","mandatory","results","validEvents","eventMapping","added","removed","changed","listen","execute","console","warn","event","eventList","addEventListener","Array","isArray","changedComponent","json","queryDefinition","jsonQuery","method","Not","SystemManager","_systems","_executeSystems","lastExecutedSystem","SystemClass","getSystem","system","init","order","sortSystems","a","b","find","s","delta","time","canExecute","startTime","clearEvents","stop","forcePlay","executeSystem","numSystems","systems","systemStats","ctx","ObjectPool","initialSize","freeList","count","isObjectPool","extraArgs","arguments","shift","createElement","expand","Math","round","pop","item","reset","QueryManager","_world","removeEntity","addEntity","SystemStateComponent","isSystemStateComponent","EntityManager","componentsManager","_entitiesByNames","_queryManager","_entityPool","options","entityClass","entityPoolSize","entitiesWithComponentsToRemove","entitiesToRemove","deferredRemovalEnabled","acquire","alive","ENTITY_CREATED","values","_ComponentTypes","__proto__","numStateComponents","getComponentsPool","_components","copy","onEntityComponentAdded","componentAddedToEntity","COMPONENT_ADDED","immediately","COMPONENT_REMOVE","_entityRemoveComponentSync","_ComponentTypesToRemove","componentName","_componentsToRemove","onEntityComponentRemoved","remove","propName","_componentPool","release","componentRemovedFromEntity","j","entityRemoveComponent","onEntityRemoved","_releaseEntity","entityRemoveAllComponents","getQuery","numQueries","Object","keys","numComponentPool","componentPool","cname","pool","used","totalUsed","size","DummyObjectPool","isDummyObjectPool","Infinity","ComponentManager","registerComponent","Version","pjson","version","nextId","Entity","id","includeRemoved","entityAddComponent","forceImmediate","hasRemovedComponent","hasComponent","DEFAULT_OPTIONS","World","assign","systemManager","eventQueues","CustomEvent","detail","lastTime","registerSystem","unregisterSystem","getSystems","processDeferredRemoval","createEntity","log","JSON","stringify","isComponent","TagComponent","createType","typeDefinition","undefinedFunctions","filter","f","isType","isTagComponent","Types","Number","baseType","isSimpleType","create","defaultValue","src","clear","Boolean","String","dst","standardTypes","number","boolean","string","inferType","value","createComponentClass","schema","type","default","attr","defineProperty","knownTypes","generateId","result","characters","charactersLength","charAt","floor","random","injectScript","onLoad","script","document","onload","head","documentElement","appendChild","hookConsoleAndErrors","connection","fn","args","send","apply","error","message","stack","includeRemoteIdHTML","remoteId","infoDiv","style","cssText","innerHTML","body","enableRemoteDevtools","generateNewCode","localStorage","setItem","location","reload","getItem","__ECSY_REMOTE_DEVTOOLS_INJECTED","__ECSY_REMOTE_DEVTOOLS","worldsBeforeLoading","onWorldCreated","e","onLoaded","peer","Peer","on","data","setAttribute","parentNode","removeChild","removeEventListener","eval","returnEval","urlParams","URLSearchParams","search","has"],"mappings":"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"}